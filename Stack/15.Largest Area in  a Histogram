#include <iostream>
#include<stack>
using namespace std;
int main()
{
    int arr[]={6,2,5,4,1,5,6};
    int n=sizeof(arr)/sizeof(arr[0]);
    int res=0;
    for(int i=0;i<n;i++){
        int max=arr[i];
        for(int j=i-1;j>=0;j--){
            if(arr[j]>=arr[i])
            max+=arr[i]; 
            else
            break;
        }
        for(int k=i+1;k<n ;k++){
            if(arr[k]>=arr[i])
            max+=arr[i];
            else
            break;
        }
        res=max>=res? max:res;
        
    }
    cout<<res<<endl;
    return 0;
}

// output:10
//method -2
class Solution {
    public:
    vector<int> nextelement(vector<int>& arr,int n){
    int min=INT_MIN;
    stack<int> s;
    s.push(-1);
    vector<int> ans(n);
    for(int i=n-1;i>=0;i--){
        int curr=arr[i];
        while(s.top()!=-1 && arr[s.top()]>=curr){
            s.pop();
        }
        ans[i]=s.top();
        s.push(i);
    }
    return ans;
}
vector<int> previouselement(vector<int>& arr,int n){
    int min=INT_MIN;
    stack<int> s;
    s.push(-1);
    vector<int> ans(n);
    for(int i=0;i<n;i++){
        int curr=arr[i];
        while(s.top()!=-1 && arr[s.top()]>=curr){
            s.pop();
        }
        ans[i]=s.top();
        s.push(i);
    }
    return ans;
}
public:
    int largestRectangleArea(vector<int>& heights) {
       
    int n=heights.size();
     
    vector<int> next(n);
    vector<int> prev(n);
    next=nextelement(heights,n);
    prev=previouselement(heights,n);
    stack <int> s;
    s.push(-1);
    int res=INT_MIN;
    for(int i=0;i<n;i++){
        int l=heights[i];
        if(next[i]==-1){
            next[i]=n;
        }
        int b=next[i]-prev[i]-1;
        int area=l*b;
        res=res>area?res:area;
    }
    // cout<<res<<endl;

    return res;
    }
};
