#include<stack>
#include<vector>
#include<limits.h>
#include <iostream>
using namespace std;
vector<int> previouselement(vector<int> arr,int n){
    stack<int> s; 
    s.push(-1);
    vector<int> ans(n); // Initializing the size of ans
    cout<<"elements pf prev:";
    for(int i=0;i<n;i++){
        int res=arr[i];
        while(arr[s.top()]>=arr[i] && s.top()!=-1){
            s.pop();    
        }   
        
        ans[i]=s.top();
        cout<< ans[i]<<"   ";
        s.push(i);
    }
    cout<<endl;
    return ans;
}

vector<int> nextelement(vector<int> arr,int n){
    stack<int> s;
    s.push(-1);
    vector<int> ans(n); // Initializing the size of ans
    cout<<"elements pf next:";
    for(int i=n-1;i>=0;i--){
        int res=arr[i];
        while(arr[s.top()]>=arr[i] && s.top()!=-1){
            s.pop();
        }   
        ans[i]=s.top();
        cout<< ans[i]<<"   ";
        s.push(i);
    }
    cout<<endl;
    return ans;
}
int main(){
    vector<vector<int>> arr={{0,1,1,0},{1,1,1,1},{1,1,1,1},{1,1,0,0}};
    int n=4;
    
    stack<int> s;
    vector<int> v=arr[0];
    int max=INT_MIN;
    vector<int> prev;
    vector<int> next;
    
    int res=0;
    int maxarea=0;
    for(int i=1;i<n;i++){
        prev=previouselement(v,n);
        next=nextelement(v,n);
        for(int j=0;j<n;j++){
            if(next[j]==-1){
                next[j]=n;
            }
            int l=v[j];
            
            max=next[j]-prev[j]-1;
            int b=max;
            maxarea=l*b;
            res=res>maxarea?res:maxarea;
            v[j]+=arr[i][j];
        }
        
    }
    cout<<res;
    return 0;
}
